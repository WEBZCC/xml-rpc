<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 28 Apr 2023 16:20:41 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: xmlRpcServer</title>
		<dateCreated>Mon, 28 May 2018 15:04:58 GMT</dateCreated>
		<dateModified>Fri, 28 Apr 2023 16:20:41 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 5, 21</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>114</windowTop>
		<windowLeft>851</windowLeft>
		<windowBottom>1124</windowBottom>
		<windowRight>2046</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/xmlrpc/">
			<outline text="worknotes.md" created="Fri, 28 Apr 2023 16:16:51 GMT">
				<outline text="#### 4/28/23; 12:16:57 PM by DW" created="Fri, 28 Apr 2023 16:16:54 GMT">
					<outline text="Started this file. " created="Fri, 28 Apr 2023 16:16:57 GMT"/>
					<outline text="If you're looking for the browser client, for some reason it's in xmlRpcValidator." created="Fri, 28 Apr 2023 16:17:03 GMT">
						<outline text="config.nodeEditor.projects.xmlRpcValidator" created="Fri, 28 Apr 2023 16:17:21 GMT"/>
						</outline>
					<outline text="These were some notes that were here before. " created="Fri, 28 Apr 2023 16:17:56 GMT">
						<outline text="betty.scripting.com">
							<outline text="at least four endpoints">
								<outline text="examples.getStateList"/>
								<outline text="examples.getStateName"/>
								<outline text="examples.getStateNames"/>
								<outline text="examples.getStateStruct"/>
								</outline>
							<outline text="good description of betty examples">
								<outline text="http://lists.xml.org/archives/xml-dev/200003/msg00349.html"/>
								</outline>
							<outline text="testing locally">
								<outline text="[&quot;xmlrpc://localhost:5392/RPC2&quot;].examples.getStateName (19)">
									<outline text="&quot;Maine&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://localhost:5392/RPC2&quot;].examples.getStateList ({12, 13, 14, 22, 44})">
									<outline text="&quot;Idaho,Illinois,Indiana,Michigan,Utah&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://localhost:5392/RPC2&quot;].examples.getStateNames (14, 35, 6, 47)">
									<outline text="&quot;Indiana\rOhio\rColorado\rWashington&quot;" isComment="true"/>
									</outline>
								<outline text="local (t); new (tabletype, @t); t.a = 12; t.b = 42; [&quot;xmlrpc://localhost:5392/RPC2&quot;].examples.getStateStruct (t)">
									<outline text="&quot;Idaho,Tennessee&quot;" isComment="true"/>
									</outline>
								</outline>
							<outline text="testing on detroit">
								<outline text="[&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateName (19)">
									<outline text="&quot;Maine&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateList ({12, 13, 14, 22, 44})">
									<outline text="&quot;Idaho,Illinois,Indiana,Michigan,Utah&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateNames (14, 35, 6, 47)">
									<outline text="&quot;Indiana\rOhio\rColorado\rWashington&quot;" isComment="true"/>
									</outline>
								<outline text="local (t); new (tabletype, @t); t.a = 12; t.b = 42; [&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateStruct (t)">
									<outline text="&quot;Idaho,Tennessee&quot;" isComment="true"/>
									</outline>
								</outline>
							<outline text="betty.scripting.com testing">
								<outline text=""/>
								<outline text="wp.newtextobject (tcp.httpreadurl (&quot;http://betty.scripting.com/nowxml&quot;), @scratchpad.bettyboop)">
									<outline text="true" isComment="true"/>
									</outline>
								<outline text=""/>
								<outline text=""/>
								<outline text=""/>
								<outline text="[&quot;xmlrpc://betty.scripting.com:5392/RPC2&quot;].examples.getStateName (19)">
									<outline text="&quot;Maine&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://betty.scripting.com:5392/RPC2&quot;].examples.getStateList ({12, 13, 14, 22, 44})">
									<outline text="&quot;Idaho,Illinois,Indiana,Michigan,Utah&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateNames (14, 35, 6, 47)">
									<outline text="&quot;Indiana\rOhio\rColorado\rWashington&quot;" isComment="true"/>
									</outline>
								<outline text="local (t); new (tabletype, @t); t.a = 12; t.b = 42; [&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateStruct (t)">
									<outline text="&quot;Idaho,Tennessee&quot;" isComment="true"/>
									</outline>
								</outline>
							<outline text="betty.scripting.com errors">
								<outline text="[&quot;xmlrpc://localhost:5392/RPC2&quot;].examples.getStateName (900)">
									<outline text="&quot;Maine&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://betty.scripting.com:5392/RPC2&quot;].examples.getStateList ({12, 13, 14, 22, 44})">
									<outline text="&quot;Idaho,Illinois,Indiana,Michigan,Utah&quot;" isComment="true"/>
									</outline>
								<outline text="[&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateNames (14, 35, 6, 47)">
									<outline text="&quot;Indiana\rOhio\rColorado\rWashington&quot;" isComment="true"/>
									</outline>
								<outline text="local (t); new (tabletype, @t); t.a = 12; t.b = 42; [&quot;xmlrpc://detroit.scripting.com:5392/RPC2&quot;].examples.getStateStruct (t)">
									<outline text="&quot;Idaho,Tennessee&quot;" isComment="true"/>
									</outline>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;davexmlrpc&quot;, "/>
					<outline text="&quot;description&quot;: &quot;XML-RPC client and server in JavaScript.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.26&quot;,"/>
					<outline text="&quot;main&quot;: &quot;xmlrpc.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/xml-rpc.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;xmlrpc.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;xml2js&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="xmlrpc.js">
				<outline text="var myProductName = &quot;xmlrpc&quot;; myVersion = &quot;0.4.26&quot;; "/>
				<outline text=""/>
				<outline text="exports.client = xmlRpcClient;"/>
				<outline text="exports.server = xmlRpcServer; "/>
				<outline text="exports.buildCall = xmlRpcBuildCall; "/>
				<outline text="exports.getReturnText = getReturnText;"/>
				<outline text="exports.getFaultText = getFaultText;"/>
				<outline text="exports.startServerOverHttp = startServerOverHttp;"/>
				<outline text=""/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="const config = {">
					<outline text="flProcessJsonRpcCalls: true"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function firstNonWhitespaceChar (s) { //6/3/18 by DW">
					<outline text="for (var i = 0; i &lt; s.length; i++) {">
						<outline text="var ch = s [i];"/>
						<outline text="if (!utils.isWhitespace (ch)) {">
							<outline text="return (ch);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined);"/>
					<outline text="}"/>
					</outline>
				<outline text="function encode (s) {">
					<outline text="return (utils.encodeXml (s));"/>
					<outline text="}"/>
					</outline>
				<outline text="function getXmlValue (theValue) { //xmlize a JavaScript value">
					<outline text="switch (typeof (theValue)) {">
						<outline text="case &quot;string&quot;:" created="Thu, 05 Dec 2013 13:38:50 GMT" pgfnum="33209">
							<outline text="return (&quot;&lt;string&gt;&quot; + encode (theValue) + &quot;&lt;/string&gt;&quot;);"/>
							</outline>
						<outline text="case &quot;boolean&quot;:" created="Thu, 05 Dec 2013 13:38:57 GMT" pgfnum="33211">
							<outline text="return (&quot;&lt;boolean&gt;&quot; + utils.getBoolean (theValue) + &quot;&lt;/boolean&gt;&quot;);"/>
							</outline>
						<outline text="case &quot;number&quot;:" created="Thu, 05 Dec 2013 13:39:46 GMT" pgfnum="33213">
							<outline text="if (Number.isInteger (theValue)) {">
								<outline text="return (&quot;&lt;i4&gt;&quot; + theValue + &quot;&lt;/i4&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return (&quot;&lt;double&gt;&quot; + theValue + &quot;&lt;/double&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="case &quot;object&quot;:">
							<outline text="var xmltext = &quot;&quot;, indentlevel = &quot;&quot;;"/>
							<outline text="function add (s) {">
								<outline text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (Array.isArray (theValue)) {">
								<outline text="add (&quot;&lt;array&gt;&quot;); indentlevel++;"/>
								<outline text="add (&quot;&lt;data&gt;&quot;); indentlevel++;"/>
								<outline text="for (var i = 0; i &lt; theValue.length; i++) {">
									<outline text="add (&quot;&lt;value&gt;&quot; + getXmlValue (theValue [i]) + &quot;&lt;/value&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="add (&quot;&lt;/data&gt;&quot;); indentlevel--;"/>
								<outline text="add (&quot;&lt;/array&gt;&quot;); indentlevel--;"/>
								<outline text="return (xmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (Buffer.isBuffer (theValue)) {">
									<outline text="return (&quot;&lt;base64&gt;&quot; + theValue.toString (&quot;base64&quot;) + &quot;&lt;/base64&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (theValue instanceof Date) { ">
										<outline text="return (&quot;&lt;dateTime.iso8601&gt;&quot; + theValue.toISOString () + &quot;&lt;/dateTime.iso8601&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="add (&quot;&lt;struct&gt;&quot;); indentlevel++;"/>
										<outline text="for (var x in theValue) {">
											<outline text="add (&quot;&lt;member&gt;&quot;); indentlevel++;"/>
											<outline text="add (&quot;&lt;name&gt;&quot; + encode (x) + &quot;&lt;/name&gt;&quot;);"/>
											<outline text="add (&quot;&lt;value&gt;&quot; + getXmlValue (theValue [x]) + &quot;&lt;/value&gt;&quot;);"/>
											<outline text="add (&quot;&lt;/member&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="add (&quot;&lt;/struct&gt;&quot;); indentlevel--;"/>
										<outline text="return (xmltext);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="default:">
							<outline text="return (&quot;&lt;base64&gt;&quot; + theValue.toString (&quot;base64&quot;) + &quot;&lt;/base64&gt;&quot;);"/>
							<outline text="return (&quot;&lt;base64&gt;&quot; + btoa (theValue) + &quot;&lt;/base64&gt;&quot;);" isComment="true"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getReturnText (theValue, format) { //get xml or json for a returned value">
					<outline text="var rpctext = &quot;&quot;, indentlevel = &quot;&quot;;"/>
					<outline text="function add (s) {">
						<outline text="rpctext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="switch (format) {">
						<outline text="case &quot;xml&quot;: case undefined:">
							<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
							<outline text="add (&quot;&lt;methodResponse&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;params&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;param&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;value&gt;&quot;); indentlevel++;"/>
							<outline text="add (getXmlValue (theValue));"/>
							<outline text="add (&quot;&lt;/value&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/param&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/params&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/methodResponse&gt;&quot;); indentlevel--;"/>
							<outline text="break;"/>
							</outline>
						<outline text="case &quot;json&quot;:">
							<outline text="var jstruct = {">
								<outline text="methodResponse: {">
									<outline text="value: theValue"/>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="rpctext = utils.jsonStringify (jstruct);"/>
							<outline text="break;"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (rpctext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getFaultText (err, format) { //get xml or json for an error return, or fault">
					<outline text="Changes" isComment="true">
						<outline text="5/27/18; 3:31:14 PM by DW">
							<outline text="&lt;?xml version=&quot;1.0&quot;?&gt;"/>
							<outline text="&lt;methodResponse&gt;">
								<outline text="&lt;fault&gt;">
									<outline text="&lt;value&gt;">
										<outline text="&lt;struct&gt;">
											<outline text="&lt;member&gt;">
												<outline text="&lt;name&gt;faultCode&lt;/name&gt;"/>
												<outline text="&lt;value&gt;&lt;int&gt;4&lt;/int&gt;&lt;/value&gt;"/>
												<outline text="&lt;/member&gt;"/>
												</outline>
											<outline text="&lt;member&gt;">
												<outline text="&lt;name&gt;faultString&lt;/name&gt;"/>
												<outline text="&lt;value&gt;&lt;string&gt;Too many parameters.&lt;/string&gt;&lt;/value&gt;"/>
												<outline text="&lt;/member&gt;"/>
												</outline>
											<outline text="&lt;/struct&gt;"/>
											</outline>
										<outline text="&lt;/value&gt;"/>
										</outline>
									<outline text="&lt;/fault&gt;"/>
									</outline>
								<outline text="&lt;/methodResponse&gt;"/>
								</outline>
							</outline>
						</outline>
					<outline text="const theStruct = {">
						<outline text="faultCode: 1,"/>
						<outline text="faultString: err.message"/>
						<outline text="};"/>
						</outline>
					<outline text="switch (format) {">
						<outline text="case &quot;xml&quot;: case undefined:">
							<outline text="var xmltext = &quot;&quot;, indentlevel = &quot;&quot;;"/>
							<outline text="function add (s) {">
								<outline text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
							<outline text="add (&quot;&lt;methodResponse&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;fault&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;value&gt;&quot;); indentlevel++;"/>
							<outline text="add (getXmlValue (theStruct));"/>
							<outline text="add (&quot;&lt;/value&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/fault&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/methodResponse&gt;&quot;); indentlevel--;"/>
							<outline text="return (xmltext);"/>
							</outline>
						<outline text="case &quot;json&quot;:">
							<outline text="var jstruct = {">
								<outline text="methodResponse: {">
									<outline text="fault: theStruct"/>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="return (utils.jsonStringify (jstruct));"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function xmlRpcBuildCall (verb, params, format) {">
					<outline text="switch (format) {">
						<outline text="case &quot;xml&quot;: case undefined:">
							<outline text="var xmltext = &quot;&quot;, indentlevel = &quot;&quot;;"/>
							<outline text="function add (s) {">
								<outline text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (params === undefined) {">
								<outline text="params = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
							<outline text="add (&quot;&lt;methodCall&gt;&quot;); indentlevel++;"/>
							<outline text="add (&quot;&lt;methodName&gt;&quot; + encode (verb) + &quot;&lt;/methodName&gt;&quot;);"/>
							<outline text="add (&quot;&lt;params&gt;&quot;); indentlevel++;"/>
							<outline text="for (var x in params) {">
								<outline text="add (&quot;&lt;param&gt;&quot;); indentlevel++;"/>
								<outline text="add (&quot;&lt;value&gt;&quot; + getXmlValue (params [x]) + &quot;&lt;/value&gt;&quot;)"/>
								<outline text="add (&quot;&lt;/param&gt;&quot;); indentlevel--;"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/params&gt;&quot;); indentlevel--;"/>
							<outline text="add (&quot;&lt;/methodCall&gt;&quot;); indentlevel--;"/>
							<outline text="return (xmltext);"/>
							</outline>
						<outline text="case &quot;json&quot;:">
							<outline text="var jstruct = {">
								<outline text="methodCall: {">
									<outline text="methodName: verb"/>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="if ((typeof (params) == &quot;object&quot;) &amp;&amp; Array.isArray (params)) {">
								<outline text="jstruct.methodCall.params = params;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="jstruct.methodCall.params = [params];"/>
								<outline text="}"/>
								</outline>
							<outline text="return (utils.jsonStringify (jstruct));"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlRpcGetValue (value) { //get a JavaScript value from an XML-specified value">
					<outline text="//Changes">
						<outline text="//6/9/18; 1:53:14 PM by DW">
							<outline text="//The XML-RPC validator found a problem -- a &lt;struct&gt; can be empty, i.e. has no members. It's legal. "/>
							</outline>
						</outline>
					<outline text="var returnedValue = undefined;"/>
					<outline text="function parseDate (theString) {">
						<outline text="Changes" isComment="true">
							<outline text="5/23/18; 10:14:08 AM by DW">
								<outline text="Frontier returns a form of ISO 8601 that Date.parse doesn't understand, so we allow for that here. Example below...">
									<outline text="20180522T16:14:32"/>
									</outline>
								</outline>
							</outline>
						<outline text="var theDate = Date.parse (theString);"/>
						<outline text="if (isNaN (theDate)) {">
							<outline text="var datePart = utils.stringNthField (theString, &quot;T&quot;, 1);"/>
							<outline text="var timePart = utils.stringNthField (theString, &quot;T&quot;, 2);"/>
							<outline text="var year = utils.stringMid (datePart, 1, 4);"/>
							<outline text="var month = utils.stringMid (datePart, 5, 2);"/>
							<outline text="var day = utils.stringMid (datePart, 7, 2);"/>
							<outline text="theString = year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;T&quot; + timePart;"/>
							<outline text="theDate = Date.parse (theString);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (new Date (theDate));"/>
						<outline text="}"/>
						</outline>
					<outline text="function badResponse (whereBad) {">
						<outline text="console.log (&quot;xmlRpcGetValue:badResponse: whereBad == &quot; + whereBad);"/>
						<outline text="var err = {">
							<outline text="message: &quot;Bad response to XML-RPC call, missing \&quot;&quot; + whereBad + &quot;\&quot; element.&quot;"/>
							<outline text="};"/>
							</outline>
						<outline text="callback (err);"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;xmlRpcGetValue: value == &quot; + utils.jsonStringify (value));" isComment="true"/>
					<outline text="for (x in value) {">
						<outline text="console.log (x)" isComment="true"/>
						<outline text="switch (x) {">
							<outline text="case &quot;i4&quot;: case &quot;int&quot;: case &quot;double&quot;: //all numbers in JavaScript are floating point">
								<outline text="returnedValue = Number (value [x]);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;string&quot;:">
								<outline text="returnedValue = value [x];"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;boolean&quot;:">
								<outline text="returnedValue = utils.getBoolean (value [x]);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;dateTime.iso8601&quot;:">
								<outline text="returnedValue = parseDate (value [x]);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;base64&quot;:">
								<outline text="var buf = new Buffer (value [x], &quot;base64&quot;);"/>
								<outline text="returnedValue = buf.toString ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;struct&quot;:">
								<outline text="&lt;struct&gt;" isComment="true">
									<outline text="&lt;member&gt;">
										<outline text="&lt;name&gt;ct&lt;/name&gt;"/>
										<outline text="&lt;value&gt;&lt;i4&gt;2071&lt;/i4&gt;&lt;/value&gt;"/>
										<outline text="&lt;/member&gt;"/>
										</outline>
									<outline text="&lt;member&gt;">
										<outline text="&lt;name&gt;name&lt;/name&gt;"/>
										<outline text="&lt;value&gt;Dave&lt;/value&gt;"/>
										<outline text="&lt;/member&gt;"/>
										</outline>
									<outline text="&lt;member&gt;">
										<outline text="&lt;name&gt;now&lt;/name&gt;"/>
										<outline text="&lt;value&gt;&lt;dateTime.iso8601&gt;20180522T15:57:45&lt;/dateTime.iso8601&gt;&lt;/value&gt;"/>
										<outline text="&lt;/member&gt;"/>
										</outline>
									<outline text="&lt;member&gt;">
										<outline text="&lt;name&gt;number&lt;/name&gt;"/>
										<outline text="&lt;value&gt;&lt;double&gt;12.02&lt;/double&gt;&lt;/value&gt;"/>
										<outline text="&lt;/member&gt;"/>
										</outline>
									<outline text="&lt;/struct&gt;"/>
									</outline>
								<outline text="returnedValue = new Object ();"/>
								<outline text="var member = value [x].member;"/>
								<outline text="if (member !== undefined) { //6/9/18 by DW">
									<outline text="if (!Array.isArray (member)) { //5/24/18 by DW">
										<outline text="member = [member];"/>
										<outline text="}"/>
										</outline>
									<outline text="for (var i = 0; i &lt; member.length; i++) {">
										<outline text="var item = member [i];"/>
										<outline text="returnedValue [item.name] = xmlRpcGetValue (item.value);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;array&quot;:">
								<outline text="&lt;array&gt;" isComment="true">
									<outline text="&lt;data&gt;">
										<outline text="&lt;value&gt;">
											<outline text="&lt;i4&gt;1&lt;/i4&gt;"/>
											<outline text="&lt;/value&gt;"/>
											</outline>
										<outline text="&lt;value&gt;">
											<outline text="&lt;i4&gt;2&lt;/i4&gt;"/>
											<outline text="&lt;/value&gt;"/>
											</outline>
										<outline text="&lt;value&gt;">
											<outline text="&lt;i4&gt;3&lt;/i4&gt;"/>
											<outline text="&lt;/value&gt;"/>
											</outline>
										<outline text="&lt;value&gt;">
											<outline text="&lt;i4&gt;4&lt;/i4&gt;"/>
											<outline text="&lt;/value&gt;"/>
											</outline>
										<outline text="&lt;/data&gt;"/>
										</outline>
									<outline text="&lt;/array&gt;"/>
									</outline>
								<outline text="returnedValue = new Array ();"/>
								<outline text="var data = value [x].data"/>
								<outline text="if (data !== undefined) {">
									<outline text="var value = data.value;"/>
									<outline text="if (value !== undefined) {">
										<outline text="if (!Array.isArray (value)) { //5/24/18 by DW">
											<outline text="value = [value];"/>
											<outline text="}"/>
											</outline>
										<outline text="console.log (&quot;array value == &quot; + utils.jsonStringify (value));" isComment="true"/>
										<outline text="console.log (&quot;value.length == &quot; + value.length);" isComment="true"/>
										<outline text=""/>
										<outline text="for (var i = 0; i &lt; value.length; i++) {">
											<outline text="let newvalue = xmlRpcGetValue (value [i]);"/>
											<outline text="console.log (&quot;newvalue == &quot; + utils.jsonStringify (newvalue));" isComment="true"/>
											<outline text="returnedValue.push (newvalue);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="badResponse (&quot;value&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (returnedValue === undefined) { //the default type is string">
						<outline text="returnedValue = value;"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;xmlRpcGetValue: returning &quot; + utils.jsonStringify (returnedValue));" isComment="true"/>
					<outline text="return (returnedValue);"/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlRpcClient (urlEndpoint, verb, params, format, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="7/1/20; 9:53:29 AM by DW">
							<outline text="The error messaging code assumed that err was non-null, but the error could have been caused by response.statusCode not being 200. I fixed it so it no longer fails in that case. "/>
							</outline>
						</outline>
					<outline text="const method = &quot;POST&quot;;"/>
					<outline text="function parseReturnedXml (xmltext) {">
						<outline text="Changes" isComment="true">
							<outline text="5/20/18; 12:53:02 PM by DW">
								<outline text="Parse something like this ">
									<outline text="&lt;methodResponse&gt;">
										<outline text="&lt;params&gt;">
											<outline text="&lt;param&gt;">
												<outline text="&lt;value&gt;Minnesota&lt;/value&gt;"/>
												<outline text="&lt;/param&gt;"/>
												</outline>
											<outline text="&lt;/params&gt;"/>
											</outline>
										<outline text="&lt;/methodResponse&gt;"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="var options = {">
							<outline text="explicitArray: false"/>
							<outline text="};"/>
							</outline>
						<outline text="xml2js.parseString (xmltext, options, function (err, jstruct) {">
							<outline text="function badResponse (whereBad) {">
								<outline text="console.log (&quot;badResponse: whereBad == &quot; + whereBad);"/>
								<outline text="var err = {">
									<outline text="message: &quot;Bad response to XML-RPC call, missing \&quot;&quot; + whereBad + &quot;\&quot; element.&quot;"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="var returnedValue = undefined, methodResponse = jstruct.methodResponse;"/>
							<outline text="console.log (utils.jsonStringify (jstruct));" isComment="true"/>
							<outline text="if (methodResponse !== undefined) {">
								<outline text="var params = methodResponse.params;"/>
								<outline text="if (params !== undefined) {">
									<outline text="var param = params.param;"/>
									<outline text="if (param !== undefined) {">
										<outline text="var value = param.value;"/>
										<outline text="if (value !== undefined) {">
											<outline text="returnedValue = xmlRpcGetValue (value);"/>
											<outline text="callback (undefined, returnedValue);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="badResponse (&quot;value&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="badResponse (&quot;param&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var fault = methodResponse.fault;"/>
									<outline text="if (fault !== undefined) {">
										<outline text="var value = fault.value;"/>
										<outline text="if (value !== undefined) {">
											<outline text="returnedValue = xmlRpcGetValue (value);"/>
											<outline text="if (returnedValue.faultString !== undefined) {">
												<outline text="returnedValue.message = returnedValue.faultString;"/>
												<outline text="}"/>
												</outline>
											<outline text="callback (returnedValue);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="badResponse (&quot;value&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="badResponse (&quot;params or fault&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="badResponse (&quot;methodResponse&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function parseReturnedJson (jsontext) {">
						<outline text="Changes" isComment="true">
							<outline text="6/6/18; 7:24:44 PM by DW">
								<outline text="Parse something like this ">
									<outline text="{">
										<outline text="&quot;methodResponse&quot;: {">
											<outline text="&quot;value&quot;: &quot;South Carolina&quot;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="Or:">
									<outline text="{">
										<outline text="&quot;methodResponse&quot;: {">
											<outline text="&quot;fault&quot;: {">
												<outline text="&quot;faultCode&quot;: 1,"/>
												<outline text="&quot;faultString&quot;: &quot;Can't get the name for state #55 because the number must be between 1 and 50.&quot;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="function errorCallback (s) {">
							<outline text="callback ({message: s});"/>
							<outline text="}"/>
							</outline>
						<outline text="try {">
							<outline text="var jstruct = JSON.parse (jsontext);"/>
							<outline text="var methodResponse = jstruct.methodResponse;"/>
							<outline text="if (methodResponse !== undefined) {">
								<outline text="if (methodResponse.value !== undefined) {">
									<outline text="callback (undefined, methodResponse.value);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (methodResponse.fault !== undefined) {">
										<outline text="var fault = methodResponse.fault;"/>
										<outline text="if (fault.faultString !== undefined) { //JavaScript convention for error reporting">
											<outline text="fault.message = fault.faultString;"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (fault);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="errorCallback (&quot;RPC response must contain a methodResponse object.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="var rpctext = xmlRpcBuildCall (verb, params, format);"/>
					<outline text=""/>
					<outline text="console.log (&quot;xmlRpcClient: verb == &quot; + verb + &quot;, urlEndpoint == &quot; + urlEndpoint);" isComment="true"/>
					<outline text="console.log (&quot;xmlRpcClient: rpctext == \n&quot; + rpctext);" isComment="true"/>
					<outline text=""/>
					<outline text="var theRequest = {">
						<outline text="url: urlEndpoint,"/>
						<outline text="followRedirect: true, "/>
						<outline text="headers: {Accept: &quot;application/json&quot;}," isComment="true"/>
						<outline text="method: &quot;POST&quot;,"/>
						<outline text="body: rpctext"/>
						<outline text="form: {" isComment="true">
							<outline text="port: port,"/>
							<outline text="path: path,"/>
							<outline text="url1: urlFeed,"/>
							<outline text="protocol: &quot;http-post&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="request (theRequest, function (err, response, rpcresponse) {">
						<outline text="if (!err &amp;&amp; response.statusCode == 200) {">
							<outline text="if (callback !== undefined) {">
								<outline text="switch (format) {">
									<outline text="case &quot;xml&quot;: case undefined: ">
										<outline text="parseReturnedXml (rpcresponse);"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;json&quot;: ">
										<outline text="parseReturnedJson (rpcresponse);"/>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;xmlRpcClient: err.message == &quot; + err.message);" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;xmlRpcClient: response.statusCode == &quot; + response.statusCode);" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function xmlRpcServer (rpctext, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="6/3/18; 12:04:52 PM by DW">
							<outline text="Updated to support JSON syntax as well as XML."/>
							</outline>
						</outline>
					<outline text="function badCall (whereBad) {">
						<outline text="console.log (&quot;badCall: whereBad == &quot; + whereBad);"/>
						<outline text="var err = {">
							<outline text="message: &quot;Bad XML-RPC call, missing \&quot;&quot; + whereBad + &quot;\&quot; element.&quot;"/>
							<outline text="};"/>
							</outline>
						<outline text="callback (err);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flProcessJsonRpcCalls &amp;&amp; (firstNonWhitespaceChar (rpctext) == &quot;{&quot;)) { //treat it as JSON -- 6/3/18 by DW">
						<outline text="var jstruct, methodCall = undefined, verb = undefined;"/>
						<outline text="try {">
							<outline text="jstruct = JSON.parse (rpctext);"/>
							<outline text="methodCall = jstruct.methodCall;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (methodCall !== undefined) {">
							<outline text="verb = methodCall.methodName;"/>
							<outline text="if (verb !== undefined) {">
								<outline text="if (methodCall.params !== undefined) {">
									<outline text="params = methodCall.params;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="params = new Array ();"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (undefined, verb, params, &quot;json&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="badCall (&quot;methodName&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="badCall (&quot;methodCall&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var options = {">
							<outline text="explicitArray: false"/>
							<outline text="};"/>
							</outline>
						<outline text="xml2js.parseString (rpctext, options, function (err, jstruct) {">
							<outline text="" isComment="true"/>
							<outline text="console.log (utils.jsonStringify (jstruct));" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="&lt;methodCall&gt;" isComment="true">
								<outline text="&lt;methodName&gt;testing.generic&lt;/methodName&gt;"/>
								<outline text="&lt;params&gt;">
									<outline text="&lt;param&gt;">
										<outline text="&lt;value&gt;&lt;i4&gt;23&lt;/i4&gt;&lt;/value&gt;"/>
										<outline text="&lt;/param&gt;"/>
										</outline>
									<outline text="&lt;/params&gt;"/>
									</outline>
								<outline text="&lt;/methodCall&gt;"/>
								</outline>
							<outline text="" isComment="true"/>
							<outline text="var methodCall = jstruct.methodCall, verb = undefined, params = new Array ();"/>
							<outline text="if (methodCall !== undefined) {">
								<outline text="verb = methodCall.methodName;"/>
								<outline text="if (verb !== undefined) {">
									<outline text="if (methodCall.params !== undefined) {">
										<outline text="var param = methodCall.params.param;"/>
										<outline text="if (param !== undefined) {">
											<outline text="if (!Array.isArray (param)) {">
												<outline text="param = [param];"/>
												<outline text="}"/>
												</outline>
											<outline text="for (var i = 0; i &lt; param.length; i++) {">
												<outline text="params.push (xmlRpcGetValue (param [i].value));"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="callback (undefined, verb, params, &quot;xml&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="badCall (&quot;methodName&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="badCall (&quot;methodCall&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startServerOverHttp (config, callback) { //9/3/19 by DW">
					<outline text="if (config === undefined) {">
						<outline text="config = {">
							<outline text="};"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flPostEnabled === undefined) { //xml-rpc uses HTTP POST">
						<outline text="config.flPostEnabled = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.xmlRpcPath === undefined) { ">
						<outline text="config.xmlRpcPath = &quot;/rpc2&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.port === undefined) { ">
						<outline text="config.port = 1400;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flLogToConsole === undefined) { ">
						<outline text="config.flLogToConsole = true"/>
						<outline text="}"/>
						</outline>
					<outline text="davehttp.start (config, function (theRequest) {">
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case config.xmlRpcPath:">
								<outline text="xmlRpcServer (theRequest.postBody, function (err, verb, params) {">
									<outline text="function returnData (jstruct) {" isComment="true">
										<outline text="console.log (&quot;returnData: jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
										<outline text="if (jstruct === undefined) {">
											<outline text="jstruct = {};"/>
											<outline text="}"/>
											</outline>
										<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
										<outline text="}"/>
										</outline>
									<outline text="function returnError (jstruct) {" isComment="true">
										<outline text="console.log (&quot;returnError: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
										<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
										<outline text="}"/>
										</outline>
									<outline text="function httpReturn (err, jstruct) {" isComment="true">
										<outline text="if (err) {">
											<outline text="returnError (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="returnData (jstruct);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="function returnXml (xval) {">
										<outline text="var xmltext = getReturnText (xval);"/>
										<outline text="fs.writeFile (&quot;lastReturnedValue.txt&quot;, xmltext, function (err) {" isComment="true">
											<outline text="});"/>
											</outline>
										<outline text="var headers = {">
											<outline text="&quot;Content-Length&quot;: xmltext.length"/>
											<outline text="};"/>
											</outline>
										<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext, headers);"/>
										<outline text="}"/>
										</outline>
									<outline text="function returnErrorXml (xval) {">
										<outline text="console.log (&quot;returnErrorXml: xval == &quot; + utils.jsonStringify (xval));"/>
										<outline text="theRequest.httpReturn (500, &quot;text/xml&quot;, getFaultText (xval));"/>
										<outline text="}"/>
										</outline>
									<outline text="function httpReturnXml (err, xval) {">
										<outline text="if (err) {">
											<outline text="returnErrorXml (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="returnXml (xval);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (err) {">
										<outline text="returnErrorXml (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="function listParams (params) {">
											<outline text="var s = &quot;&quot;;"/>
											<outline text="params.forEach (function (param) {">
												<outline text="s += &quot;\&quot;&quot; + param + &quot;\&quot;, &quot;;"/>
												<outline text="});"/>
												</outline>
											<outline text="s = utils.stringMid (s, 1, s.length - 2);"/>
											<outline text="return (s);"/>
											<outline text="}"/>
											<outline text=""/>
											<outline text=""/>
											</outline>
										<outline text="console.log (verb + &quot; (&quot; + listParams (params) + &quot;)&quot;);" isComment="true"/>
										<outline text="var xmlRpcRequest = {">
											<outline text="verb: verb,"/>
											<outline text="params: params,"/>
											<outline text="returnVal: httpReturnXml, //function that returns the result of the xml-rpc call"/>
											<outline text="httpRequest: theRequest //include a copy of the low-level request"/>
											<outline text="};"/>
											</outline>
										<outline text="return (callback (xmlRpcRequest)); //returns true if handled, false if not"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="return;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/betty/betty.js">
				<outline text="var myProductName = &quot;betty&quot;; myVersion = &quot;0.4.8&quot;;"/>
				<outline text=""/>
				<outline text="const xmlrpc = require (&quot;../../xmlrpc.js&quot;);" isComment="true"/>
				<outline text="const xmlrpc = require (&quot;./lib/xmlrpc.js&quot;);" isComment="true"/>
				<outline text="const xmlrpc = require (&quot;davexmlrpc&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="port: process.env.PORT || 5392,"/>
					<outline text="flPostEnabled: true,"/>
					<outline text="flAllowAccessFromAnywhere: true,"/>
					<outline text="flLogToConsole: true"/>
					<outline text="}"/>
					</outline>
				<outline text="var stats = {">
					<outline text="callCounts: new Object (),"/>
					<outline text="whenLastCall: new Date (0),"/>
					<outline text="ctStatsWrites: 0"/>
					<outline text="};"/>
					</outline>
				<outline text="var flStatsChanged = false;"/>
				<outline text="const fnameStats = &quot;stats.json&quot;;"/>
				<outline text=""/>
				<outline text="//betty examples">
					<outline text="function nthState (n) {">
						<outline text="const states = [">
							<outline text="&quot;Alabama&quot;,"/>
							<outline text="&quot;Alaska&quot;,"/>
							<outline text="&quot;Arizona&quot;,"/>
							<outline text="&quot;Arkansas&quot;,"/>
							<outline text="&quot;California&quot;,"/>
							<outline text="&quot;Colorado&quot;,"/>
							<outline text="&quot;Connecticut&quot;,"/>
							<outline text="&quot;Delaware&quot;,"/>
							<outline text="&quot;Florida&quot;,"/>
							<outline text="&quot;Georgia&quot;,"/>
							<outline text="&quot;Hawaii&quot;,"/>
							<outline text="&quot;Idaho&quot;,"/>
							<outline text="&quot;Illinois&quot;,"/>
							<outline text="&quot;Indiana&quot;,"/>
							<outline text="&quot;Iowa&quot;,"/>
							<outline text="&quot;Kansas&quot;,"/>
							<outline text="&quot;Kentucky&quot;,"/>
							<outline text="&quot;Louisiana&quot;,"/>
							<outline text="&quot;Maine&quot;,"/>
							<outline text="&quot;Maryland&quot;,"/>
							<outline text="&quot;Massachusetts&quot;,"/>
							<outline text="&quot;Michigan&quot;,"/>
							<outline text="&quot;Minnesota&quot;,"/>
							<outline text="&quot;Mississippi&quot;,"/>
							<outline text="&quot;Missouri&quot;,"/>
							<outline text="&quot;Montana&quot;,"/>
							<outline text="&quot;Nebraska&quot;,"/>
							<outline text="&quot;Nevada&quot;,"/>
							<outline text="&quot;New Hampshire&quot;,"/>
							<outline text="&quot;New Jersey&quot;,"/>
							<outline text="&quot;New Mexico&quot;,"/>
							<outline text="&quot;New York&quot;,"/>
							<outline text="&quot;North Carolina&quot;,"/>
							<outline text="&quot;North Dakota&quot;,"/>
							<outline text="&quot;Ohio&quot;,"/>
							<outline text="&quot;Oklahoma&quot;,"/>
							<outline text="&quot;Oregon&quot;,"/>
							<outline text="&quot;Pennsylvania&quot;,"/>
							<outline text="&quot;Rhode Island&quot;,"/>
							<outline text="&quot;South Carolina&quot;,"/>
							<outline text="&quot;South Dakota&quot;,"/>
							<outline text="&quot;Tennessee&quot;,"/>
							<outline text="&quot;Texas&quot;,"/>
							<outline text="&quot;Utah&quot;,"/>
							<outline text="&quot;Vermont&quot;,"/>
							<outline text="&quot;Virginia&quot;,"/>
							<outline text="&quot;Washington&quot;,"/>
							<outline text="&quot;West Virginia&quot;,"/>
							<outline text="&quot;Wisconsin&quot;,"/>
							<outline text="&quot;Wyoming&quot;"/>
							<outline text="];"/>
							</outline>
						<outline text="var theName = states [n - 1];"/>
						<outline text="if (theName === undefined) {">
							<outline text="throw {message: &quot;Can't get the name for state #&quot; + n + &quot; because the number must be between 1 and 50.&quot;};"/>
							<outline text="}"/>
							</outline>
						<outline text="return (theName);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getStateList (numlist) {">
						<outline text="var s = &quot;&quot;;"/>
						<outline text="for (var i = 0; i &lt; numlist.length; i++) {">
							<outline text="s += nthState (numlist [i]) + &quot;,&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (utils.stringMid (s, 1, s.length - 1));"/>
						<outline text="}"/>
						</outline>
					<outline text="function getStateName (statenum) {">
						<outline text="return (nthState (statenum));"/>
						<outline text="}"/>
						</outline>
					<outline text="function getStateNames (num1, num2, num3, num4) {">
						<outline text="return (nthState (num1) + &quot;\r&quot; + nthState (num2) + &quot;\r&quot; + nthState (num3) + &quot;\r&quot; + nthState (num4));"/>
						<outline text="}"/>
						</outline>
					<outline text="function getStateStruct (statestruct) {">
						<outline text="var s = &quot;&quot;;"/>
						<outline text="for (var x in statestruct) {">
							<outline text="s += nthState (statestruct [x]) + &quot;,&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (utils.stringMid (s, 1, s.length - 1));"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//xml-rpc validation suite -- http://xmlrpc.scripting.com/validator1Docs.html">
					<outline text="function arrayOfStructsTest (theArray) {">
						<outline text="var sum = 0;"/>
						<outline text="for (var i = 0; i &lt; theArray.length; i++) {">
							<outline text="sum += theArray [i].curly;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (sum);"/>
						<outline text="}"/>
						</outline>
					<outline text="function countTheEntities (s) {">
						<outline text="var sums = {">
							<outline text="ctLeftAngleBrackets: 0,"/>
							<outline text="ctRightAngleBrackets: 0,"/>
							<outline text="ctAmpersands: 0,"/>
							<outline text="ctApostrophes: 0,"/>
							<outline text="ctQuotes: 0"/>
							<outline text="};"/>
							</outline>
						<outline text="for (var i = 0; i &lt; s.length; i++) {">
							<outline text="switch (s [i]) {">
								<outline text="case &quot;&lt;&quot;:">
									<outline text="sums.ctLeftAngleBrackets++;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;&gt;&quot;:">
									<outline text="sums.ctRightAngleBrackets++;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;&amp;&quot;:">
									<outline text="sums.ctAmpersands++;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;'&quot;:">
									<outline text="sums.ctApostrophes++;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;\&quot;&quot;:">
									<outline text="sums.ctQuotes++;"/>
									<outline text="break;"/>
									</outline>
								<outline text=""/>
								<outline text=""/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (sums);"/>
						<outline text="}"/>
						</outline>
					<outline text="function easyStructTest (theStruct) {">
						<outline text="return (theStruct.moe + theStruct.larry + theStruct.curly);"/>
						<outline text="}"/>
						</outline>
					<outline text="function echoStructTest (theStruct) {">
						<outline text="return (theStruct);"/>
						<outline text="}"/>
						</outline>
					<outline text="function manyTypesTest (num, boo, s, doub, when, bin) {">
						<outline text="return ([num, boo, s, doub, when, bin]);"/>
						<outline text="}"/>
						</outline>
					<outline text="function moderateSizeArrayCheck (theArray) {">
						<outline text="return (theArray [0] + theArray [theArray.length - 1]);"/>
						<outline text="}"/>
						</outline>
					<outline text="function nestedStructTest (theStruct) {">
						<outline text="var x = theStruct [&quot;2000&quot;] [&quot;04&quot;] [&quot;01&quot;];"/>
						<outline text="return (x.moe + x.larry + x.curly);"/>
						<outline text="}"/>
						</outline>
					<outline text="function simpleStructReturnTest (num) {">
						<outline text="return ({">
							<outline text="times10: num * 10,"/>
							<outline text="times100: num * 100,"/>
							<outline text="times1000: num * 1000"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function handleBettyCall (verb, params) {">
					<outline text="console.log (&quot;handleBettyCall: verb == &quot; + verb + &quot;, params == &quot; + utils.jsonStringify (params));" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="if (stats.callCounts [verb] === undefined) {">
						<outline text="stats.callCounts [verb] = 0;"/>
						<outline text="}"/>
						</outline>
					<outline text="stats.callCounts [verb]++;"/>
					<outline text="stats.whenLastCall = new Date ();"/>
					<outline text="flStatsChanged = true;"/>
					<outline text="" isComment="true"/>
					<outline text="console.log (&quot;handleBettyCall: verb == &quot; + verb);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="switch (verb) {">
						<outline text="case &quot;examples.getStateList&quot;:">
							<outline text="return (getStateList (params [0]));"/>
							</outline>
						<outline text="case &quot;examples.getStateName&quot;:">
							<outline text="return (getStateName (params [0]));"/>
							</outline>
						<outline text="case &quot;examples.getStateNames&quot;:">
							<outline text="return (getStateNames (params [0], params [1], params [2], params [3]));"/>
							</outline>
						<outline text="case &quot;examples.getStateStruct&quot;:">
							<outline text="return (getStateStruct (params [0]));"/>
							</outline>
						<outline text="case &quot;examples.echoParams&quot;:">
							<outline text="return (params);"/>
							</outline>
						<outline text="case &quot;validator1.arrayOfStructsTest&quot;:">
							<outline text="return (arrayOfStructsTest (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.arrayOfStructsTest&quot;:">
							<outline text="return (arrayOfStructsTest (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.countTheEntities&quot;:">
							<outline text="return (countTheEntities (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.easyStructTest&quot;:">
							<outline text="return (easyStructTest (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.echoStructTest&quot;:">
							<outline text="return (echoStructTest (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.manyTypesTest&quot;:">
							<outline text="return (manyTypesTest (params [0], params [1], params [2], params [3], params [4], params [5])); "/>
							</outline>
						<outline text="case &quot;validator1.moderateSizeArrayCheck&quot;:">
							<outline text="return (moderateSizeArrayCheck (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.nestedStructTest&quot;:">
							<outline text="return (nestedStructTest (params [0])); "/>
							</outline>
						<outline text="case &quot;validator1.simpleStructReturnTest&quot;:">
							<outline text="return (simpleStructReturnTest (params [0])); "/>
							</outline>
						<outline text="default: ">
							<outline text="throw {message: &quot;Can't make the call because \&quot;&quot; + verb + &quot;\&quot; is not defined.&quot;};"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined);"/>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (callback) {">
					<outline text="fs.readFile (fnameStats, function (err, jsontext) {">
						<outline text="if (!err) {">
							<outline text="try {">
								<outline text="stats = JSON.parse (jsontext);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flStatsChanged) {">
						<outline text="if (utils.secondsSince (stats.whenLastCall) &gt; 1) {">
							<outline text="flStatsChanged = false;"/>
							<outline text="stats.ctStatsWrites++;"/>
							<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="readStats (function () {">
						<outline text="davehttp.start (config, function (theRequest) {">
							<outline text="function nowXml () {">
								<outline text="var xmltext = &quot;&quot;, indentlevel = &quot;&quot;;"/>
								<outline text="function add (s) {">
									<outline text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
								<outline text="add (&quot;&lt;now&gt;&quot; + new Date ().toISOString () + &quot;&lt;/now&gt;&quot;);"/>
								<outline text="return (xmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="function notFoundReturn () {">
								<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/rpc2&quot;:">
									<outline text="console.log (theRequest.postBody);" isComment="true"/>
									<outline text="xmlrpc.server (theRequest.postBody, function (err, verb, params, format) {">
										<outline text="function errorReturn (err) {">
											<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, xmlrpc.getFaultText (err, format)); "/>
											<outline text="}"/>
											</outline>
										<outline text="if (err) {">
											<outline text="errorReturn (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="try {">
												<outline text="var returnValue = handleBettyCall (verb, params); //entirely in JavaScript"/>
												<outline text="console.log (&quot;handleBettyCall returned: &quot; + utils.jsonStringify (returnValue));" isComment="true"/>
												<outline text="if (returnValue === undefined) {">
													<outline text="notFoundReturn ();"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="var rpctext = xmlrpc.getReturnText (returnValue, format); //translate result to XML or JSON"/>
													<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, rpctext); "/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="catch (err) {">
												<outline text="errorReturn (err);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="return;"/>
									</outline>
								<outline text="case &quot;/now&quot;:">
									<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, new Date ());"/>
									<outline text="return;"/>
									</outline>
								<outline text="case &quot;/nowxml&quot;:">
									<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, nowXml ());"/>
									<outline text="return;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="notFoundReturn ();"/>
							<outline text="});"/>
							</outline>
						<outline text="setInterval (everySecond, 1000); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="examples/betty/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;betty&quot;,"/>
					<outline text="&quot;description&quot;: &quot;UserLand's 'betty' test server, written in JavaScript, running in Node.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;main&quot;: &quot;betty.js&quot;, "/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davexmlrpc&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/betty/test.js">
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="const theRequest = {">
					<outline text="url: &quot;http://betty.scripting.com:5392/nowxml&quot;,"/>
					<outline text="followRedirect: false,"/>
					<outline text="headers: {">
						<outline text="&quot;X-Forwarded-Host&quot;: &quot;betty.scripting.com&quot;,"/>
						<outline text="&quot;X-Forwarded-For&quot;: &quot;::ffff:98.13.247.122&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="request (theRequest, function (err, response, xmlresponse) {">
					<outline text="if (!err &amp;&amp; response.statusCode == 200) {">
						<outline text="console.log (utils.jsonStringify (response.headers));"/>
						<outline text="console.log (xmlresponse);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;err.message == &quot; + err.message);" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				</outline>
			<outline text="examples/simple/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;simple&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A simple XML-RPC server.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davexmlrpc&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/simple/simple.js">
				<outline text="const xmlrpc = require (&quot;../../xmlrpc.js&quot;);" isComment="true"/>
				<outline text="const xmlrpc = require (&quot;davexmlrpc&quot;);"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="port: 1417,"/>
					<outline text="xmlRpcPath: &quot;/rpc2&quot;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="xmlrpc.startServerOverHttp (config, function (request) {">
					<outline text="switch (request.verb) {">
						<outline text="case &quot;uppercase&quot;:">
							<outline text="if (request.params.length &gt; 0) {">
								<outline text="request.returnVal (undefined, request.params [0].toUpperCase ());"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="request.returnVal ({message: &quot;There must be at least one parameter.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //we handled it"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false); //we didn't handle it"/>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/nodeclient/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;nodeclient&quot;,"/>
					<outline text="&quot;description&quot;: &quot;How to call a server using XML-RPC in Node.js.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davexmlrpc&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/nodeclient/client.js">
				<outline text="const xmlrpc = require (&quot;davexmlrpc&quot;);"/>
				<outline text=""/>
				<outline text="const urlEndpoint = &quot;http://betty.userland.com/rpc2&quot;;"/>
				<outline text="const verb = &quot;examples.getStateName&quot;;"/>
				<outline text="const params = [5]; //an array containing one element, the number 5"/>
				<outline text="const format = &quot;xml&quot;; //could also be &quot;json&quot;"/>
				<outline text=""/>
				<outline text="xmlrpc.client (urlEndpoint, verb, params, format, function (err, data) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (JSON.stringify (data));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/nodeclient/client2.js">
				<outline text="const xmlrpc = require (&quot;davexmlrpc&quot;);"/>
				<outline text=""/>
				<outline text="const urlEndpoint = &quot;http://githubstories.scripting.com/rpc2&quot;;"/>
				<outline text="const verb = &quot;ping&quot;;"/>
				<outline text="const params = []; "/>
				<outline text="const format = &quot;xml&quot;; "/>
				<outline text=""/>
				<outline text="xmlrpc.client (urlEndpoint, verb, params, format, function (err, data) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (JSON.stringify (data));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="test.js">
				<outline text="const xmlrpc = require (&quot;./xmlrpc.js&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="function testXmlRpcClient () {">
					<outline text="const verb = &quot;testing.generic&quot;;" isComment="true"/>
					<outline text="const verb = &quot;examples.getStateName&quot;;" isComment="true"/>
					<outline text="var filedata = fs.readFileSync (&quot;test.png&quot;);" isComment="true"/>
					<outline text="const params = {buffer: new Buffer (filedata)};" isComment="true"/>
					<outline text="const params = {statenum: 23};" isComment="true"/>
					<outline text=""/>
					<outline text=""/>
					<outline text="const urlserver = &quot;http://betty.scripting.com/rpc2&quot;;"/>
					<outline text="const format = &quot;xml&quot;;"/>
					<outline text="const tests = [">
						<outline text="{">
							<outline text="verb: &quot;examples.getStateName&quot;,"/>
							<outline text="params: [23]"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="verb: &quot;examples.getStateNames&quot;,"/>
							<outline text="params: [12, 22, 32, 42]"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="verb: &quot;examples.getStateList&quot;,"/>
							<outline text="params: [ [12, 22, 32, 42] ]"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="verb: &quot;examples.getStateStruct&quot;,"/>
							<outline text="params: [{state1: 3, state2: 42}]"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="verb: &quot;examples.getStateName&quot;,"/>
							<outline text="params: [900]"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="verb: &quot;noSuchName&quot;,"/>
							<outline text="params: []"/>
							<outline text="}"/>
							</outline>
						<outline text="];"/>
						</outline>
					<outline text="for (let i = 0; i &lt; tests.length; i++) {">
						<outline text="let test = tests [i];"/>
						<outline text="let whenstart = new Date ();"/>
						<outline text="xmlrpc.client (urlserver, test.verb, test.params, format, function (err, data) {">
							<outline text="console.log (&quot;\n&quot; + test.verb);"/>
							<outline text="if (err) {">
								<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (utils.jsonStringify (data));"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="var whenstart = new Date ();" isComment="true"/>
					<outline text="const verb = &quot;examples.getStateName&quot;;"/>
					<outline text="const params = [5];"/>
					<outline text="xmlrpc.client (urlserver, verb, params, format, function (err, data) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (utils.jsonStringify (data));"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleXmlRpcCall (verb, params) {">
					<outline text="var states = [">
						<outline text="&quot;Alabama&quot;,"/>
						<outline text="&quot;Alaska&quot;,"/>
						<outline text="&quot;Arizona&quot;,"/>
						<outline text="&quot;Arkansas&quot;,"/>
						<outline text="&quot;California&quot;,"/>
						<outline text="&quot;Colorado&quot;,"/>
						<outline text="&quot;Connecticut&quot;,"/>
						<outline text="&quot;Delaware&quot;,"/>
						<outline text="&quot;Florida&quot;,"/>
						<outline text="&quot;Georgia&quot;,"/>
						<outline text="&quot;Hawaii&quot;,"/>
						<outline text="&quot;Idaho&quot;,"/>
						<outline text="&quot;Illinois&quot;,"/>
						<outline text="&quot;Indiana&quot;,"/>
						<outline text="&quot;Iowa&quot;,"/>
						<outline text="&quot;Kansas&quot;,"/>
						<outline text="&quot;Kentucky&quot;,"/>
						<outline text="&quot;Louisiana&quot;,"/>
						<outline text="&quot;Maine&quot;,"/>
						<outline text="&quot;Maryland&quot;,"/>
						<outline text="&quot;Massachusetts&quot;,"/>
						<outline text="&quot;Michigan&quot;,"/>
						<outline text="&quot;Minnesota&quot;,"/>
						<outline text="&quot;Mississippi&quot;,"/>
						<outline text="&quot;Missouri&quot;,"/>
						<outline text="&quot;Montana&quot;,"/>
						<outline text="&quot;Nebraska&quot;,"/>
						<outline text="&quot;Nevada&quot;,"/>
						<outline text="&quot;New Hampshire&quot;,"/>
						<outline text="&quot;New Jersey&quot;,"/>
						<outline text="&quot;New Mexico&quot;,"/>
						<outline text="&quot;New York&quot;,"/>
						<outline text="&quot;North Carolina&quot;,"/>
						<outline text="&quot;North Dakota&quot;,"/>
						<outline text="&quot;Ohio&quot;,"/>
						<outline text="&quot;Oklahoma&quot;,"/>
						<outline text="&quot;Oregon&quot;,"/>
						<outline text="&quot;Pennsylvania&quot;,"/>
						<outline text="&quot;Rhode Island&quot;,"/>
						<outline text="&quot;South Carolina&quot;,"/>
						<outline text="&quot;South Dakota&quot;,"/>
						<outline text="&quot;Tennessee&quot;,"/>
						<outline text="&quot;Texas&quot;,"/>
						<outline text="&quot;Utah&quot;,"/>
						<outline text="&quot;Vermont&quot;,"/>
						<outline text="&quot;Virginia&quot;,"/>
						<outline text="&quot;Washington&quot;,"/>
						<outline text="&quot;West Virginia&quot;,"/>
						<outline text="&quot;Wisconsin&quot;,"/>
						<outline text="&quot;Wyoming&quot;"/>
						<outline text="];"/>
						</outline>
					<outline text="switch (verb) {">
						<outline text="case &quot;examples.getStateName&quot;:">
							<outline text="return (states [params [0] - 1]);"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined);"/>
					<outline text="}"/>
					</outline>
				<outline text="function testXmlRpcServer () {">
					<outline text="var config = {">
						<outline text="port: 1408,"/>
						<outline text="flPostEnabled: true,"/>
						<outline text="flLogToConsole: true"/>
						<outline text="}"/>
						</outline>
					<outline text="davehttp.start (config, function (theRequest) {">
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case &quot;/rpc2&quot;:">
								<outline text="xmlrpc.server (theRequest.postBody, function (err, verb, params) {">
									<outline text="if (err) {">
										<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;verb == &quot; + verb);"/>
										<outline text="console.log (&quot;params == &quot; + utils.jsonStringify (params));"/>
										<outline text="var theValue = xmlrpc.getReturnValue (handleXmlRpcCall (verb, params));"/>
										<outline text="console.log (theValue);"/>
										<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, theValue);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="return;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, &quot;That's something we can't do for you. Sorry!! ;-(&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="var xmltext = xmlrpc.buildCall (&quot;examples.getStateName&quot;, {statenum: 23, fruit: &quot;pear&quot;});"/>
					<outline text="xmlrpc.server (xmltext, function (err, verb, params) {">
						<outline text=""/>
						<outline text="console.log (&quot;verb == &quot; + verb);"/>
						<outline text="console.log (&quot;params == &quot; + utils.jsonStringify (params));"/>
						<outline text=""/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="testXmlRpcClient ();"/>
				<outline text="testXmlRpcServer ();" isComment="true"/>
				</outline>
			<outline text="readme.md" isComment="true">
				<outline text="# XML-RPC">
					<outline text="An XML-RPC client and server in JavaScript.">
						<outline text="* Client and server &lt;a href=&quot;https://www.npmjs.com/package/davexmlrpc&quot;&gt;for Node.js&lt;/a&gt;."/>
						<outline text="* Client for the &lt;a href=&quot;https://github.com/scripting/xml-rpc/tree/master/client&quot;&gt;browser&lt;/a&gt;."/>
						<outline text="* Pure JavaScript."/>
						<outline text="* Written by one of the &lt;a href=&quot;http://scripting.com/?tab=about&quot;&gt;designers&lt;/a&gt; of the protocol."/>
						</outline>
					</outline>
				<outline text="### Example client">
					<outline text="Here's code that makes a simple XML-RPC call in a Node.js app.">
						<outline text="&lt;pre&gt;[[http://scripting.com/code/xmlrpc/examples/nodeclient/client.js]]&lt;/pre&gt;"/>
						</outline>
					<outline text="It sends a call to the demo server, betty.userland.com. "/>
					<outline text="The procedure it calls is &quot;examples.getStateName,&quot; with a single parameter, the number 5."/>
					<outline text="The call will be made in XML (it could also use JSON if we know the server supports it). "/>
					<outline text="When the server returns, the callback receives the standard Node error object in the first param, and if there was no error, the data returned through XML-RPC in the second parameter."/>
					</outline>
				<outline text="### Example server">
					<outline text="Here's the code for a simple XML-RPC server. "/>
					<outline text="&lt;pre&gt;[[http://scripting.com/code/xmlrpc/examples/simple/simple.js]]&lt;/pre&gt;"/>
					<outline text="Here's pseudo-code that calls this service. It returns THIS IS A TEST.">
						<outline text="&lt;pre&gt;[&quot;xmlrpc://localhost:1417/rpc2&quot;].uppercase (&quot;this is a test&quot;)&lt;/pre&gt;"/>
						</outline>
					</outline>
				<outline text="### Simple XML-RPC debugger">
					<outline text="I've put up a &lt;a href=&quot;http://scripting.com/code/xmlrpcdebugger/&quot;&gt;simple app&lt;/a&gt; that lets you try calling an XML-RPC procedure from an HTML form, where you supply the URL of the endpoint, the verb you want to call, and its parameters as a JavaScript expression. "/>
					<outline text="It then displays the result in JSON in a box below. "/>
					<outline text="If there's an error message it's displayed in red."/>
					<outline text="You can try calling these routines on betty.scripting.com (it's the default endpoint):">
						<outline text="1. examples.getStateName, params = 31"/>
						<outline text="2. examples.getStateNames, params = [12, 22, 32, 42]"/>
						<outline text="3. examples.getStateList, params = [\[12, 22, 32, 42]\] "/>
						<outline text="4. examples.getStateStruct, params = [{state1: 3, state2: 42}] "/>
						<outline text="5. examples.getStateName, params = 900 (error)"/>
						<outline text="5. noSuchName (error)"/>
						</outline>
					<outline text="If you open the JavaScript console, you'll see the actual XML-RPC cals, in XML, as they go over the wire. &lt;a href=&quot;http://scripting.com/images/2018/05/30/xmlRpcOverTheWire.png&quot;&gt;Screen shot&lt;/a&gt;."/>
					</outline>
				<outline text="### How params work in the xmlRpcClient">
					<outline text="The third param to the xmlRpcClient function is either a value or a list of values."/>
					<outline text="If it's a value, the XML-RPC procedure is called with a single parameter."/>
					<outline text="If it's a list with N elements, the procedure is called with N params. "/>
					<outline text="If you want to call a procedure with a single param that's a list, send a list with a single element that's the list. It's the one weird case for this calling convention, and is illustrated with the third call, above."/>
					</outline>
				<outline text="### Using JSON in place of XML">
					<outline text="The XML-RPC standard specifies using XML, of course, but in this implementation, as an experiment, you can also use JSON."/>
					<outline text="When processing a request, we look at the first non-whitespace character. If it's a left curly brace, we treat it as JSON, not XML."/>
					<outline text="I haven't written a spec for the JSONified version, but I have created a &lt;a href=&quot;http://scripting.com/misc/xmlrpc-in-json.html&quot;&gt;cribsheet&lt;/a&gt; with examples that I used to guide the implementation. "/>
					<outline text="Two types, &amp;lt;base64&gt; and &amp;lt;dateTime.iso8601&gt; are represented as strings. There is no way for the toolkit to know they are binary data or dates. This means that the XML and JSON versions are not exactly the same. Not sure what the implications of this will be. I wrote up the issue &lt;a href=&quot;http://scripting.com/2018/06/10/152333.html&quot;&gt;on Scripting News&lt;/a&gt;."/>
					</outline>
				<outline text="### Please help test for interop">
					<outline text="If you're running XML-RPC in your world, could you try testing against the server "/>
					<outline text="I have running at betty.scripting.com. The server is accessible through port 80. The calls it handles are exactly the ones handled by the userland version of the test server. Demo &lt;a href=&quot;https://github.com/scripting/xml-rpc/blob/master/client/code.js&quot;&gt;code&lt;/a&gt; that calls the actual server is provided, in JavaScript."/>
					<outline text="The goal is to replace betty.userland.com with the one running here. But only after enough testing to be confident that it makes a good reference server. "/>
					<outline text="If you have success, or find problems, please post a note in the &lt;a href=&quot;https://github.com/scripting/xml-rpc/issues&quot;&gt;issues section&lt;/a&gt; here. Thanks!"/>
					</outline>
				<outline text="### Docs and resources">
					<outline text="I started a page at &lt;a href=&quot;http://reboot.xmlrpc.com/&quot;&gt;reboot.xmlrpc.com&lt;/a&gt; with links to new stuff related to this work. "/>
					</outline>
				<outline text="### Questions, comments?">
					<outline text="Post an &lt;a href=&quot;https://github.com/scripting/xml-rpc/issues&quot;&gt;issue&lt;/a&gt; here. "/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/misc/" isComment="true">
			<outline text="xmlrpc-in-json.html">
				<outline text="&lt;html&gt;"/>
				<outline text="&lt;head&gt;">
					<outline text="&lt;title&gt;XML-RPC-in-JSON examples&lt;/title&gt;"/>
					<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
					<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
					<outline text="&lt;%basicIncludes2%&gt;"/>
					<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
						<outline text="function everySecond () {">
							<outline text="}"/>
							</outline>
						<outline text="function startup () {">
							<outline text="console.log (&quot;startup&quot;);"/>
							<outline text="self.setInterval (function () {everySecond ()}, 1000); "/>
							<outline text="}"/>
							</outline>
						<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
						</outline>
					<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
						<outline text="body {">
							<outline text="font-family: Ubuntu;"/>
							<outline text="font-size: 18px;"/>
							<outline text="background-color: whitesmoke;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 60%;"/>
							<outline text="margin-top: 50px;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-bottom: 600px;"/>
							<outline text="}"/>
							</outline>
						<outline text="h4 {">
							<outline text="font-family: &quot;Arial&quot;;"/>
							<outline text="margin-top: 35px;"/>
							<outline text="}"/>
							</outline>
						<outline text="pre {">
							<outline text="background-color: white;"/>
							<outline text="}"/>
							</outline>
						<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
						</outline>
					<outline text="&lt;/head&gt;"/>
					</outline>
				<outline text="&lt;body&gt;"/>
				<outline text="&lt;div class=&quot;divPageBody&quot;&gt;"/>
				<outline text="&lt;p&gt;June 2018 by Dave Winer&lt;p&gt;"/>
				<outline text="&lt;h1&gt;XML-RPC-in-JSON examples&lt;/h1&gt;"/>
				<outline text="&lt;p&gt;My new &lt;a href=&quot;https://github.com/scripting/xml-rpc&quot;&gt;JavaScript toolkit&lt;/a&gt; for XML-RPC supports a &lt;a href=&quot;https://github.com/scripting/xml-rpc#using-json-in-place-of-xml&quot;&gt;JSON syntax&lt;/a&gt;.&lt;/p&gt;"/>
				<outline text="&lt;p&gt;Here's a table comparing the two versions.&lt;/p&gt;"/>
				<outline text=""/>
				<outline text="&lt;h4&gt;Single param&lt;/h4&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="&amp;lt;methodCall&gt;">
					<outline text="&amp;lt;methodName&gt;examples.getStateName&amp;lt;/methodName&gt;"/>
					<outline text="&amp;lt;params&gt;">
						<outline text="&amp;lt;param&gt;">
							<outline text="&amp;lt;value&gt;&amp;lt;int&gt;50&amp;lt;/int&gt;&amp;lt;/value&gt;"/>
							<outline text="&amp;lt;/param&gt;"/>
							</outline>
						<outline text="&amp;lt;/params&gt;"/>
						</outline>
					<outline text="&amp;lt;/methodCall&gt;"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="{">
					<outline text="&quot;methodCall&quot;: {">
						<outline text="&quot;methodName&quot;: &quot;examples.getStateName&quot;,"/>
						<outline text="&quot;params&quot;: [">
							<outline text="23"/>
							<outline text="]"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;h4&gt;Param is an array&lt;/h4&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="&amp;lt;methodCall&gt;">
					<outline text="&amp;lt;methodName&gt;examples.getStateList&amp;lt;/methodName&gt;"/>
					<outline text="&amp;lt;params&gt;">
						<outline text="&amp;lt;param&gt;">
							<outline text="&amp;lt;value&gt;">
								<outline text="&amp;lt;array&gt;">
									<outline text="&amp;lt;data&gt;">
										<outline text="&amp;lt;value&gt;&amp;lt;int&gt;12&amp;lt;/int&gt;&amp;lt;/value&gt;"/>
										<outline text="&amp;lt;value&gt;&amp;lt;int&gt;44&amp;lt;/int&gt;&amp;lt;/value&gt;"/>
										<outline text="&amp;lt;value&gt;&amp;lt;int&gt;4&amp;lt;/int&gt;&amp;lt;/value&gt;"/>
										<outline text="&amp;lt;value&gt;&amp;lt;int&gt;1&amp;lt;/int&gt;&amp;lt;/value&gt;"/>
										<outline text="&amp;lt;/data&gt;"/>
										</outline>
									<outline text="&amp;lt;/array&gt;"/>
									</outline>
								<outline text="&amp;lt;/value&gt;"/>
								</outline>
							<outline text="&amp;lt;/param&gt;"/>
							</outline>
						<outline text="&amp;lt;/params&gt;"/>
						</outline>
					<outline text="&amp;lt;/methodCall&gt;"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="{">
					<outline text="&quot;methodCall&quot;: {">
						<outline text="&quot;methodName&quot;: &quot;examples.getStateList&quot;,"/>
						<outline text="&quot;params&quot;: [">
							<outline text="[">
								<outline text="12,"/>
								<outline text="44,"/>
								<outline text="4"/>
								<outline text="]"/>
								</outline>
							<outline text="]"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;h4&gt;Param is a struct&lt;/h4&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="&amp;lt;methodCall&gt;">
					<outline text="&amp;lt;methodName&gt;examples.getStateStruct&amp;lt;/methodName&gt;"/>
					<outline text="&amp;lt;params&gt;">
						<outline text="&amp;lt;param&gt;">
							<outline text="&amp;lt;value&gt;">
								<outline text="&amp;lt;struct&gt;">
									<outline text="&amp;lt;member&gt;">
										<outline text="&amp;lt;name&gt;state1&amp;lt;/name&gt;"/>
										<outline text="&amp;lt;value&gt;">
											<outline text="&amp;lt;int&gt;12&amp;lt;/int&gt;"/>
											<outline text="&amp;lt;/value&gt;"/>
											</outline>
										<outline text="&amp;lt;/member&gt;"/>
										</outline>
									<outline text="&amp;lt;member&gt;">
										<outline text="&amp;lt;name&gt;state2&amp;lt;/name&gt;"/>
										<outline text="&amp;lt;value&gt;">
											<outline text="&amp;lt;int&gt;8&amp;lt;/int&gt;"/>
											<outline text="&amp;lt;/value&gt;"/>
											</outline>
										<outline text="&amp;lt;/member&gt;"/>
										</outline>
									<outline text="&amp;lt;/struct&gt;"/>
									</outline>
								<outline text="&amp;lt;/value&gt;"/>
								</outline>
							<outline text="&amp;lt;/param&gt;"/>
							</outline>
						<outline text="&amp;lt;/params&gt;"/>
						</outline>
					<outline text="&amp;lt;/methodCall&gt;"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="{">
					<outline text="&quot;methodCall&quot;: {">
						<outline text="&quot;methodName&quot;: &quot;examples.getStateStruct&quot;,"/>
						<outline text="&quot;params&quot;: [">
							<outline text="{">
								<outline text="&quot;state1&quot;: 12,"/>
								<outline text="&quot;state2&quot;: 8"/>
								<outline text="}"/>
								</outline>
							<outline text="]"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;h4&gt;Normal, non-error response&lt;/h4&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="&amp;lt;methodResponse&gt;">
					<outline text="&amp;lt;params&gt;">
						<outline text="&amp;lt;param&gt;">
							<outline text="&amp;lt;value&gt;">
								<outline text="&amp;lt;string&gt;South Carolina&amp;lt;/string&gt;"/>
								<outline text="&amp;lt;/value&gt;"/>
								</outline>
							<outline text="&amp;lt;/param&gt;"/>
							</outline>
						<outline text="&amp;lt;/params&gt;"/>
						</outline>
					<outline text="&amp;lt;/methodResponse&gt;"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="{">
					<outline text="&quot;methodResponse&quot;: {">
						<outline text="&quot;value&quot;: &quot;South Carolina&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;h4&gt;Error response&lt;/h4&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="&amp;lt;methodResponse&gt;">
					<outline text="&amp;lt;fault&gt;">
						<outline text="&amp;lt;value&gt;">
							<outline text="&amp;lt;struct&gt;">
								<outline text="&amp;lt;member&gt;">
									<outline text="&amp;lt;name&gt;faultCode&amp;lt;/name&gt;"/>
									<outline text="&amp;lt;value&gt;&amp;lt;i4&gt;1&amp;lt;/i4&gt;&amp;lt;/value&gt;"/>
									<outline text="&amp;lt;/member&gt;"/>
									</outline>
								<outline text="&amp;lt;member&gt;">
									<outline text="&amp;lt;name&gt;faultString&amp;lt;/name&gt;"/>
									<outline text="&amp;lt;value&gt;&amp;lt;string&gt;Can't delete the file because it doesn't exist.&amp;lt;/string&gt;&amp;lt;/value&gt;"/>
									<outline text="&amp;lt;/member&gt;"/>
									</outline>
								<outline text="&amp;lt;/struct&gt;"/>
								</outline>
							<outline text="&amp;lt;/value&gt;"/>
							</outline>
						<outline text="&amp;lt;/fault&gt;"/>
						</outline>
					<outline text="&amp;lt;/methodResponse&gt;"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text="&lt;pre&gt;"/>
				<outline text="{">
					<outline text="&quot;methodResponse&quot;: {">
						<outline text="&quot;fault&quot;: {">
							<outline text="&quot;faultCode&quot;: 1,"/>
							<outline text="&quot;faultString&quot;: &quot;Can't delete the file because it doesn't exist.&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="&lt;/pre&gt;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="&lt;/div&gt;"/>
				<outline text="&lt;script&gt;">
					<outline text="$(document).ready (function () {">
						<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
						<outline text="});"/>
						</outline>
					<outline text="&lt;/script&gt;"/>
					</outline>
				<outline text="&lt;/body&gt;"/>
				<outline text="&lt;/html&gt;"/>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildXmlRpc ()"/>
			</outline>
		</body>
	</opml>
